/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_LINUX_USER_GENERATED_TRACERS_H
#define TRACE_LINUX_USER_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_SIGNAL_TABLE_INIT_EVENT;
extern TraceEvent _TRACE_SIGNAL_DO_SIGACTION_GUEST_EVENT;
extern TraceEvent _TRACE_SIGNAL_DO_SIGACTION_HOST_EVENT;
extern TraceEvent _TRACE_USER_SETUP_FRAME_EVENT;
extern TraceEvent _TRACE_USER_SETUP_RT_FRAME_EVENT;
extern TraceEvent _TRACE_USER_DO_RT_SIGRETURN_EVENT;
extern TraceEvent _TRACE_USER_DO_SIGRETURN_EVENT;
extern TraceEvent _TRACE_USER_FORCE_SIG_EVENT;
extern TraceEvent _TRACE_USER_HANDLE_SIGNAL_EVENT;
extern TraceEvent _TRACE_USER_HOST_SIGNAL_EVENT;
extern TraceEvent _TRACE_USER_QUEUE_SIGNAL_EVENT;
extern TraceEvent _TRACE_USER_S390X_RESTORE_SIGREGS_EVENT;
extern TraceEvent _TRACE_TARGET_MPROTECT_EVENT;
extern TraceEvent _TRACE_TARGET_MMAP_EVENT;
extern TraceEvent _TRACE_TARGET_MMAP_COMPLETE_EVENT;
extern TraceEvent _TRACE_TARGET_MUNMAP_EVENT;
extern uint16_t _TRACE_SIGNAL_TABLE_INIT_DSTATE;
extern uint16_t _TRACE_SIGNAL_DO_SIGACTION_GUEST_DSTATE;
extern uint16_t _TRACE_SIGNAL_DO_SIGACTION_HOST_DSTATE;
extern uint16_t _TRACE_USER_SETUP_FRAME_DSTATE;
extern uint16_t _TRACE_USER_SETUP_RT_FRAME_DSTATE;
extern uint16_t _TRACE_USER_DO_RT_SIGRETURN_DSTATE;
extern uint16_t _TRACE_USER_DO_SIGRETURN_DSTATE;
extern uint16_t _TRACE_USER_FORCE_SIG_DSTATE;
extern uint16_t _TRACE_USER_HANDLE_SIGNAL_DSTATE;
extern uint16_t _TRACE_USER_HOST_SIGNAL_DSTATE;
extern uint16_t _TRACE_USER_QUEUE_SIGNAL_DSTATE;
extern uint16_t _TRACE_USER_S390X_RESTORE_SIGREGS_DSTATE;
extern uint16_t _TRACE_TARGET_MPROTECT_DSTATE;
extern uint16_t _TRACE_TARGET_MMAP_DSTATE;
extern uint16_t _TRACE_TARGET_MMAP_COMPLETE_DSTATE;
extern uint16_t _TRACE_TARGET_MUNMAP_DSTATE;
#define TRACE_SIGNAL_TABLE_INIT_ENABLED 1
#define TRACE_SIGNAL_DO_SIGACTION_GUEST_ENABLED 1
#define TRACE_SIGNAL_DO_SIGACTION_HOST_ENABLED 1
#define TRACE_USER_SETUP_FRAME_ENABLED 1
#define TRACE_USER_SETUP_RT_FRAME_ENABLED 1
#define TRACE_USER_DO_RT_SIGRETURN_ENABLED 1
#define TRACE_USER_DO_SIGRETURN_ENABLED 1
#define TRACE_USER_FORCE_SIG_ENABLED 1
#define TRACE_USER_HANDLE_SIGNAL_ENABLED 1
#define TRACE_USER_HOST_SIGNAL_ENABLED 1
#define TRACE_USER_QUEUE_SIGNAL_ENABLED 1
#define TRACE_USER_S390X_RESTORE_SIGREGS_ENABLED 1
#define TRACE_TARGET_MPROTECT_ENABLED 1
#define TRACE_TARGET_MMAP_ENABLED 1
#define TRACE_TARGET_MMAP_COMPLETE_ENABLED 1
#define TRACE_TARGET_MUNMAP_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_SIGNAL_TABLE_INIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SIGNAL_TABLE_INIT) || \
    false)

static inline void _nocheck__trace_signal_table_init(int i)
{
    if (trace_event_get_state(TRACE_SIGNAL_TABLE_INIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("%d@%zu.%06zu:signal_table_init " "number of unavailable signals: %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , i);
#line 76 "trace/trace-linux_user.h"
        } else {
#line 4 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("signal_table_init " "number of unavailable signals: %d" "\n", i);
#line 80 "trace/trace-linux_user.h"
        }
    }
}

static inline void trace_signal_table_init(int i)
{
    if (true) {
        _nocheck__trace_signal_table_init(i);
    }
}

#define TRACE_SIGNAL_DO_SIGACTION_GUEST_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SIGNAL_DO_SIGACTION_GUEST) || \
    false)

static inline void _nocheck__trace_signal_do_sigaction_guest(int sig, int max)
{
    if (trace_event_get_state(TRACE_SIGNAL_DO_SIGACTION_GUEST) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("%d@%zu.%06zu:signal_do_sigaction_guest " "target signal %d (MAX %d)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , sig, max);
#line 107 "trace/trace-linux_user.h"
        } else {
#line 5 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("signal_do_sigaction_guest " "target signal %d (MAX %d)" "\n", sig, max);
#line 111 "trace/trace-linux_user.h"
        }
    }
}

static inline void trace_signal_do_sigaction_guest(int sig, int max)
{
    if (true) {
        _nocheck__trace_signal_do_sigaction_guest(sig, max);
    }
}

#define TRACE_SIGNAL_DO_SIGACTION_HOST_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SIGNAL_DO_SIGACTION_HOST) || \
    false)

static inline void _nocheck__trace_signal_do_sigaction_host(int sig, int max)
{
    if (trace_event_get_state(TRACE_SIGNAL_DO_SIGACTION_HOST) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("%d@%zu.%06zu:signal_do_sigaction_host " "host signal %d (MAX %d)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , sig, max);
#line 138 "trace/trace-linux_user.h"
        } else {
#line 6 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("signal_do_sigaction_host " "host signal %d (MAX %d)" "\n", sig, max);
#line 142 "trace/trace-linux_user.h"
        }
    }
}

static inline void trace_signal_do_sigaction_host(int sig, int max)
{
    if (true) {
        _nocheck__trace_signal_do_sigaction_host(sig, max);
    }
}

#define TRACE_USER_SETUP_FRAME_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_USER_SETUP_FRAME) || \
    false)

static inline void _nocheck__trace_user_setup_frame(void * env, uint64_t frame_addr)
{
    if (trace_event_get_state(TRACE_USER_SETUP_FRAME) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 8 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("%d@%zu.%06zu:user_setup_frame " "env=%p frame_addr=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , env, frame_addr);
#line 169 "trace/trace-linux_user.h"
        } else {
#line 8 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("user_setup_frame " "env=%p frame_addr=0x%"PRIx64 "\n", env, frame_addr);
#line 173 "trace/trace-linux_user.h"
        }
    }
}

static inline void trace_user_setup_frame(void * env, uint64_t frame_addr)
{
    if (true) {
        _nocheck__trace_user_setup_frame(env, frame_addr);
    }
}

#define TRACE_USER_SETUP_RT_FRAME_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_USER_SETUP_RT_FRAME) || \
    false)

static inline void _nocheck__trace_user_setup_rt_frame(void * env, uint64_t frame_addr)
{
    if (trace_event_get_state(TRACE_USER_SETUP_RT_FRAME) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 9 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("%d@%zu.%06zu:user_setup_rt_frame " "env=%p frame_addr=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , env, frame_addr);
#line 200 "trace/trace-linux_user.h"
        } else {
#line 9 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("user_setup_rt_frame " "env=%p frame_addr=0x%"PRIx64 "\n", env, frame_addr);
#line 204 "trace/trace-linux_user.h"
        }
    }
}

static inline void trace_user_setup_rt_frame(void * env, uint64_t frame_addr)
{
    if (true) {
        _nocheck__trace_user_setup_rt_frame(env, frame_addr);
    }
}

#define TRACE_USER_DO_RT_SIGRETURN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_USER_DO_RT_SIGRETURN) || \
    false)

static inline void _nocheck__trace_user_do_rt_sigreturn(void * env, uint64_t frame_addr)
{
    if (trace_event_get_state(TRACE_USER_DO_RT_SIGRETURN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 10 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("%d@%zu.%06zu:user_do_rt_sigreturn " "env=%p frame_addr=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , env, frame_addr);
#line 231 "trace/trace-linux_user.h"
        } else {
#line 10 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("user_do_rt_sigreturn " "env=%p frame_addr=0x%"PRIx64 "\n", env, frame_addr);
#line 235 "trace/trace-linux_user.h"
        }
    }
}

static inline void trace_user_do_rt_sigreturn(void * env, uint64_t frame_addr)
{
    if (true) {
        _nocheck__trace_user_do_rt_sigreturn(env, frame_addr);
    }
}

#define TRACE_USER_DO_SIGRETURN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_USER_DO_SIGRETURN) || \
    false)

static inline void _nocheck__trace_user_do_sigreturn(void * env, uint64_t frame_addr)
{
    if (trace_event_get_state(TRACE_USER_DO_SIGRETURN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 11 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("%d@%zu.%06zu:user_do_sigreturn " "env=%p frame_addr=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , env, frame_addr);
#line 262 "trace/trace-linux_user.h"
        } else {
#line 11 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("user_do_sigreturn " "env=%p frame_addr=0x%"PRIx64 "\n", env, frame_addr);
#line 266 "trace/trace-linux_user.h"
        }
    }
}

static inline void trace_user_do_sigreturn(void * env, uint64_t frame_addr)
{
    if (true) {
        _nocheck__trace_user_do_sigreturn(env, frame_addr);
    }
}

#define TRACE_USER_FORCE_SIG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_USER_FORCE_SIG) || \
    false)

static inline void _nocheck__trace_user_force_sig(void * env, int target_sig, int host_sig)
{
    if (trace_event_get_state(TRACE_USER_FORCE_SIG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 12 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("%d@%zu.%06zu:user_force_sig " "env=%p signal %d (host %d)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , env, target_sig, host_sig);
#line 293 "trace/trace-linux_user.h"
        } else {
#line 12 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("user_force_sig " "env=%p signal %d (host %d)" "\n", env, target_sig, host_sig);
#line 297 "trace/trace-linux_user.h"
        }
    }
}

static inline void trace_user_force_sig(void * env, int target_sig, int host_sig)
{
    if (true) {
        _nocheck__trace_user_force_sig(env, target_sig, host_sig);
    }
}

#define TRACE_USER_HANDLE_SIGNAL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_USER_HANDLE_SIGNAL) || \
    false)

static inline void _nocheck__trace_user_handle_signal(void * env, int target_sig)
{
    if (trace_event_get_state(TRACE_USER_HANDLE_SIGNAL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 13 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("%d@%zu.%06zu:user_handle_signal " "env=%p signal %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , env, target_sig);
#line 324 "trace/trace-linux_user.h"
        } else {
#line 13 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("user_handle_signal " "env=%p signal %d" "\n", env, target_sig);
#line 328 "trace/trace-linux_user.h"
        }
    }
}

static inline void trace_user_handle_signal(void * env, int target_sig)
{
    if (true) {
        _nocheck__trace_user_handle_signal(env, target_sig);
    }
}

#define TRACE_USER_HOST_SIGNAL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_USER_HOST_SIGNAL) || \
    false)

static inline void _nocheck__trace_user_host_signal(void * env, int host_sig, int target_sig)
{
    if (trace_event_get_state(TRACE_USER_HOST_SIGNAL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 14 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("%d@%zu.%06zu:user_host_signal " "env=%p signal %d (target %d(" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , env, host_sig, target_sig);
#line 355 "trace/trace-linux_user.h"
        } else {
#line 14 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("user_host_signal " "env=%p signal %d (target %d(" "\n", env, host_sig, target_sig);
#line 359 "trace/trace-linux_user.h"
        }
    }
}

static inline void trace_user_host_signal(void * env, int host_sig, int target_sig)
{
    if (true) {
        _nocheck__trace_user_host_signal(env, host_sig, target_sig);
    }
}

#define TRACE_USER_QUEUE_SIGNAL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_USER_QUEUE_SIGNAL) || \
    false)

static inline void _nocheck__trace_user_queue_signal(void * env, int target_sig)
{
    if (trace_event_get_state(TRACE_USER_QUEUE_SIGNAL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 15 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("%d@%zu.%06zu:user_queue_signal " "env=%p signal %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , env, target_sig);
#line 386 "trace/trace-linux_user.h"
        } else {
#line 15 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("user_queue_signal " "env=%p signal %d" "\n", env, target_sig);
#line 390 "trace/trace-linux_user.h"
        }
    }
}

static inline void trace_user_queue_signal(void * env, int target_sig)
{
    if (true) {
        _nocheck__trace_user_queue_signal(env, target_sig);
    }
}

#define TRACE_USER_S390X_RESTORE_SIGREGS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_USER_S390X_RESTORE_SIGREGS) || \
    false)

static inline void _nocheck__trace_user_s390x_restore_sigregs(void * env, uint64_t sc_psw_addr, uint64_t env_psw_addr)
{
    if (trace_event_get_state(TRACE_USER_S390X_RESTORE_SIGREGS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 16 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("%d@%zu.%06zu:user_s390x_restore_sigregs " "env=%p frame psw.addr 0x%"PRIx64 " current psw.addr 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , env, sc_psw_addr, env_psw_addr);
#line 417 "trace/trace-linux_user.h"
        } else {
#line 16 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("user_s390x_restore_sigregs " "env=%p frame psw.addr 0x%"PRIx64 " current psw.addr 0x%"PRIx64 "\n", env, sc_psw_addr, env_psw_addr);
#line 421 "trace/trace-linux_user.h"
        }
    }
}

static inline void trace_user_s390x_restore_sigregs(void * env, uint64_t sc_psw_addr, uint64_t env_psw_addr)
{
    if (true) {
        _nocheck__trace_user_s390x_restore_sigregs(env, sc_psw_addr, env_psw_addr);
    }
}

#define TRACE_TARGET_MPROTECT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TARGET_MPROTECT) || \
    false)

static inline void _nocheck__trace_target_mprotect(uint64_t start, uint64_t len, int flags)
{
    if (trace_event_get_state(TRACE_TARGET_MPROTECT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 19 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("%d@%zu.%06zu:target_mprotect " "start=0x%"PRIx64 " len=0x%"PRIx64 " prot=0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , start, len, flags);
#line 448 "trace/trace-linux_user.h"
        } else {
#line 19 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("target_mprotect " "start=0x%"PRIx64 " len=0x%"PRIx64 " prot=0x%x" "\n", start, len, flags);
#line 452 "trace/trace-linux_user.h"
        }
    }
}

static inline void trace_target_mprotect(uint64_t start, uint64_t len, int flags)
{
    if (true) {
        _nocheck__trace_target_mprotect(start, len, flags);
    }
}

#define TRACE_TARGET_MMAP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TARGET_MMAP) || \
    false)

static inline void _nocheck__trace_target_mmap(uint64_t start, uint64_t len, int pflags, int mflags, int fd, uint64_t offset)
{
    if (trace_event_get_state(TRACE_TARGET_MMAP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 20 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("%d@%zu.%06zu:target_mmap " "start=0x%"PRIx64 " len=0x%"PRIx64 " prot=0x%x flags=0x%x fd=%d offset=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , start, len, pflags, mflags, fd, offset);
#line 479 "trace/trace-linux_user.h"
        } else {
#line 20 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("target_mmap " "start=0x%"PRIx64 " len=0x%"PRIx64 " prot=0x%x flags=0x%x fd=%d offset=0x%"PRIx64 "\n", start, len, pflags, mflags, fd, offset);
#line 483 "trace/trace-linux_user.h"
        }
    }
}

static inline void trace_target_mmap(uint64_t start, uint64_t len, int pflags, int mflags, int fd, uint64_t offset)
{
    if (true) {
        _nocheck__trace_target_mmap(start, len, pflags, mflags, fd, offset);
    }
}

#define TRACE_TARGET_MMAP_COMPLETE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TARGET_MMAP_COMPLETE) || \
    false)

static inline void _nocheck__trace_target_mmap_complete(uint64_t retaddr)
{
    if (trace_event_get_state(TRACE_TARGET_MMAP_COMPLETE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 21 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("%d@%zu.%06zu:target_mmap_complete " "retaddr=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , retaddr);
#line 510 "trace/trace-linux_user.h"
        } else {
#line 21 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("target_mmap_complete " "retaddr=0x%"PRIx64 "\n", retaddr);
#line 514 "trace/trace-linux_user.h"
        }
    }
}

static inline void trace_target_mmap_complete(uint64_t retaddr)
{
    if (true) {
        _nocheck__trace_target_mmap_complete(retaddr);
    }
}

#define TRACE_TARGET_MUNMAP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TARGET_MUNMAP) || \
    false)

static inline void _nocheck__trace_target_munmap(uint64_t start, uint64_t len)
{
    if (trace_event_get_state(TRACE_TARGET_MUNMAP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 22 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("%d@%zu.%06zu:target_munmap " "start=0x%"PRIx64" len=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , start, len);
#line 541 "trace/trace-linux_user.h"
        } else {
#line 22 "/home/hunter/project/qemu/linux-user/trace-events"
            qemu_log("target_munmap " "start=0x%"PRIx64" len=0x%"PRIx64 "\n", start, len);
#line 545 "trace/trace-linux_user.h"
        }
    }
}

static inline void trace_target_munmap(uint64_t start, uint64_t len)
{
    if (true) {
        _nocheck__trace_target_munmap(start, len);
    }
}
#endif /* TRACE_LINUX_USER_GENERATED_TRACERS_H */
